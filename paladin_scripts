#####
#Aasimar power setup

!test <drac2>
if not character().cc_exists("Healing Hands"):
  character().create_cc("Healing Hands",0,1,"long","bubble")
if not character().cc_exists("Radiant Soul"):
  character().create_cc("Radiant Soul",0,1,"long","bubble")
</drac2>

###
#Paladin power setup; Run this every time you level

!test <drac2>
character().create_cc("Lay on Hands Pool",0,5*PaladinLevel,"long","default")
if ( PaladinLevel < 7 ):
  character().create_cc("Channel Divinity",0,1,"short","bubble")
elif ( PaladinLevel <15 ):
  character().create_cc("Channel Divinity",0,2,"short","bubble")
else:
  character().create_cc("Channel Divinity",0,3,"short","bubble")
character().create_cc("Divine Sense",0,charismaMod+1,"long","bubble")
</drac2>


#Healing hands

!alias hh embed
<drac2>
args=argparse(&ARGS&)
targets=args.get('t')
target = "\u200b"
usage = "\u200b"
failure = False
if (combat()):
  if ((len(targets) > 0) and (character().get_cc("Healing Hands") > 0)):
    target = combat().get_combatant(targets[0]).name
    combat().get_combatant(target).modify_hp("+"f'{level}')
    character().set_cc("Healing Hands",(character().get_cc("Healing Hands") - 1 ) )
  else:
    failure = True
else:
  if (character().get_cc("Healing Hands") > 0):
    target = targets[0] if (len(targets) > 0) else "\u200b"
    character().set_cc("Healing Hands",(character().get_cc("Healing Hands") - 1 ) )
  else:
    failure = True
</drac2>
-title "{{ f'{character().name} uses Healing Hands' if not failure else f'{character().name} fails to use Healing Hands!' }}"
-desc "As an action, you can touch a creature and cause it to regain a number of hit points equal to your level. Once you use this trait, you can't use it again until you finish a long rest."
-f "Target:"|"{{ target }}"
-f "Heal Strength:"|"   {{ level }} HP"
-f "Usage:"|"```!hh -t Player```Target is required in combat, hp must be added to target manually outside of combat."
-f "{{"Healing Hands"}}|{{'◉'*get_cc("Healing Hands") + '〇'*(get_cc_max("Healing Hands")-get_cc("Healing Hands"))}}"
-footer "Source VGM"


#Radiant Soul

!alias rs embed
<drac2>
args=argparse(&ARGS&)
failure = False
if (character().get_cc("Radiant Soul") > 0):
  if (combat()):
    combat().me.add_effect("Radiant Soul","",10,"","","","Flight: 30ft, Add "f'{level}'" radiant damage to one attack or spell per turn")
  character().set_cc("Radiant Soul",(character().get_cc("Radiant Soul") - 1 ) )  
else:
  failure =True
</drac2>
-title "{{ f'{character().name} reveals their Radiant Soul' if not failure else f'{character().name} fails to harness the power of their Radiant Soul!' }}"
-desc "Starting at 3rd level, you can use your action to unleash the divine energy within yourself, causing your eyes to glimmer and two luminous, incorporeal wings to sprout from your back. Your transformation lasts for 1 minute or until you end it as a bonus action. During it, you have a flying speed of 30 feet, and once on each of your turns, you can deal extra radiant damage to one target when you deal damage to it with an attack or a spell. The extra radiant damage equals your level. Once you use this trait, you can't use it again until you finish a long rest."
-f "Usage:"|"Set Radiant Soul and decrease counter```!rs```Use radiant attack in combat after using Radiant Soul```!attack Weapon -t Target rs```Radiant attack only usable in combat, Radiant Soul effect will only work in combat."
-f "{{"Radiant Soul"}}|{{'◉'*get_cc("Radiant Soul") + '〇'*(get_cc_max("Radiant Soul")-get_cc("Radiant Soul"))}}"
-footer "Source VGM"


#Radiant Soul snippet

!serversnippet rs {{ rad = combat().me.get_effect("Radiant Soul") if combat() else False}} {{ f'-d {level}[radiant] -f "Radiant Soul"|"Once on each of your turns, while Radiant Soul is in effect, you can deal extra radiant damage to one target when you deal damage to it with an attack or a spell. The extra radiant damage equals your level."' if rad else f'-f "Radiant Soul: Failure!"|"only usable in combat and when Radiant Soul effect is active"' }}


#Divine Smite (Stolen from Avrae dev server)

!alias smite embed {{P,a,i,c,Help,h  = get("PaladinLevel",0), argparse(&ARGS&), '-i' in &ARGS&, combat(), f'[-l #] [-i] [-t target] [crit] [fiend|undead]', "&*&" in "help?"}}
{{slot,pclass,cr,exf,exu,target = a.last('l',1,int),int(P) >= 2, 2 if 'crit' in a else 1, 'fiend' in a, 'undead' in a, a.last("t")}}
{{sl,mslot,target = get_slots(slot), min(4, slot), c.get_combatant(target) if c and target else None}}
{{f'-title "Divine Smite{" Help" if h else ""}!"'}} -color <color>
-thumb <image>
{{f'-desc "`!smite [args]`\n\n Using the Paladin Feautre: Divine Smite!\n\n**__Valid Arguments__**\n`-l [spell slot level]` - Sets Spell slot level to be used for the smite. (Default: 1)\n`-i` - Ignores the requirements of the alias for class level or remaining spell slots. (For NPC use by example)\n\n`-t \"target\"` - Sets targets for the smite.\n`crit` - Doubles the dice of the smite in the event your attack was a crtical.\n`fiend|undead` - Adds an extra die of damage if the target is a fiend or an undead."' if h else f'-desc "{name} attacks {"a Fiend" if exf else "an Undead" if exu else ""} with a Level {slot} Divine Smite!"' if pclass or i else err(f'You do not have this Ability!\n **{Help}**')}}
{{sroll ='2d8'+(f'+{mslot-1}d8' if slot >= 2 else '')+('+1d8' if exf or exu else '')+'[radiant]'}}
{{'' if i or h else use_slot(slot) if sl else err(f'No spell slots of Level {slot} remaining.\n **{Help}**')}}
{{droll = target.damage(sroll, crit = cr == 2).damage if target else vroll(sroll,cr)}}
{{f'-f "{target.name} | {droll}"' if target else f'-f " "Meta" | **Damage{" (CRIT!)" if cr == 2 else ""}:** {droll}"' if not h else ''}}
{{h or f'-f "Spell Slots {"(-1)" if not i else ""}| {slots_str(slot)}"'}}
-footer "{{f"{target}\n" if target else ""}}!smite [-l #] [-i] [-t target] [crit] [fiend|undead]"


#Lay On hands (Stolen from Avrae dev server)

!alias loh embed {{P,type,a,i,c,Help,cco,h,g  = get("PaladinLevel",0), "&1&", argparse(&ARGS&), '-i' in &ARGS&, combat(), f'[disease|poison|heal #] [-i] [-t target]',"Lay on Hands", "&*&" in "help?",get_gvar("ee66262b-3bde-4e7e-8078-5d1c03e21d14")}}
{{amt,pclass,lh,cd,cp,target,cc = -int("&2&" if '&2&'.isdigit() else type if type.isdigit() else 1),int(P) >= 1,type in 'healing' or type.isdigit(),type in 'disease',type in 'poison',a.last("t"),cco if cc_exists(cco) else "Lay on Hands Pool"}}
{{target,call = c.get_combatant(target) if c and target else None, cd or cp}}
{{ed,ep = target.get_effect('disease') if target else '', target.get_effect('poison') if target else ''}}
{{f'-title "Lay on Hands{" Help" if h else ""}!"'}}
-color <color> -thumb <image>
{{sroll,times =(f'{amt}' if not call else "0")+' [heal]',-amt}}
{{amt = 0 if h else amt*5 if call else amt}}
{{cg = get_cc(cc)>=-amt if not h else ""}}
{{'' if i or h else mod_cc(cc,amt) if cg else err(f'Not enough points of Lay on Hands remaining.\n {Help}\n You only have {get_cc(cc)} Points left')}}
{{f'-desc {g}' if h else f'-desc "{name} heals {times if times > 1 else "a" if times == 1 else ""} {"Disease Condition(s)" if cd else "Poison Condition(s)" if cp else ""} using {-amt} points of Lay on Hands!"' if pclass or i else err(f'You do not have this Ability!\n {Help}')}}
{{droll = target.damage(sroll).damage if target else (sroll)}}
{{f'-f "{target.name} | {droll}"' if target else f'-f " "Meta" | Damage: {droll}"' if not h else ''}}
{{f'-f "Effect|{"Disease" if cd else "Poison"} effect removed from {target.name if target else "subject"}."' if call else ''}}
{{target.remove_effect('disease') if ed and call else target.remove_effect('poison') if ep and call else ''}}
{{h or f'-f "{cc} {f"({amt})" if not i else ""}| {cc_str(cc)}"'}}
-footer "{{f"{target}\n" if target else ""}}!loh {{Help}}"


#Divine Sense

!alias sense embed
<drac2>
args=argparse(&ARGS&)
failure = False
if (character().get_cc("Divine Sense") > 0):
  if (combat()):
    combat().me.add_effect("Divine Sense","",2,"","",True,"Sense celestial, fiend, or undead within 60 feet of you that is not behind total cover")
  character().set_cc("Divine Sense",(character().get_cc("Divine Sense") - 1 ) )  
else:
  failure =True
</drac2>
-title "{{ f'{character().name} uses Divine Sense' if not failure else f'{character().name} fails use Divine Sense!' }}"
-desc "The presence of strong evil registers on your senses like a noxious odor, and powerful good rings like heavenly music in your ears. As an action, you can open your awareness to detect such forces. Until the end of your next turn, you know the location of any celestial, fiend, or undead within 60 feet of you that is not behind total cover. You know the type (celestial, fiend, or undead) of any being whose presence you sense, but not its identity (the vampire Count Strahd von Zarovich, for instance). Within the same radius, you also detect the presence of any place or object that has been consecrated or desecrated, as with the hallow spell. You can use this feature a number of times equal to 1 + your Charisma modifier. When you finish a long rest, you regain all expended uses."
-f "Usage:"|"Set Divine Sense and decrease counter```!sense```"
-f "{{"Divine Sense"}}|{{'◉'*get_cc("Divine Sense") + '〇'*(get_cc_max("Divine Sense")-get_cc("Divine Sense"))}}"
-footer "Source PHB"


#Emmisarry of peace

!alias eop embed
<drac2>
args=argparse(&ARGS&)
cha_skill=args.get('s')[0] if args.get('s') else "persuasion"
failure = False
cha_roll = "n/a" 
if ((character().get_cc("Channel Divinity") > 0) and ("%1%" != "check")):
  if (combat()):
    combat().me.add_effect("Emissary of Peace","",100,"","","","As a bonus action, you grant yourself a +5 bonus to Charisma (Persuasion) checks for the next 10 minutes.")
  character().set_cc("Channel Divinity",(character().get_cc("Channel Divinity") - 1 ) )  
elif ("%1%" == "check"):
  if (combat()):
    if not (combat().me.get_effect("Emissary of Peace")):
      failure = True
  cha_roll = vroll("1d20+"f'{character().skills[cha_skill].value}'"+5")
else:
  failure =True  
</drac2>
-title "{{ f'{character().name} uses Emmisarry of Peace' if not failure else f'{character().name} fails use Emmisarry of Peace!' }}"
-desc "You can use your Channel Divinity to augment your presence with divine power. As a bonus action, you grant yourself a +5 bonus to Charisma (Persuasion) checks for the next 10 minutes."
-f "{{cha_skill}} Check Result:"|"{{ f'{cha_roll}' if not failure else 'n/a' }}"
-f "Usage:"|"Set Emissary of Peace and decrease Channel Divinity counter```!eop```Use eop to roll a charisma check with bonus```!eop check```If using in battle, a check is made to make sure eop is an active effect. Outside of Combat, it is assumed you enabled the power before trying a check```!eop check -s skillname``` to use the power with a skill besides perception"
-f "{{"Channel Divinity"}}|{{'◉'*get_cc("Channel Divinity") + '〇'*(get_cc_max("Channel Divinity")-get_cc("Channel Divinity"))}}"
-footer "Source XGE"


#Rebuke the Violent

!alias rtv embed
<drac2>
args=argparse(&ARGS&)
target=combat().get_combatant(args.get('t')[0]).name if args.get('t') and combat() else "\u200b"
damage=int(args.get('d')[0]) if args.get('d') else 0
savRoll="\u200b"
spellDC=8 + proficiencyBonus + charismaMod
adv=""
adv= False if args.get('adv') else adv
adv= True if args.get('dis') else adv
if ((target) and (damage)):
  failure = False
else:
  failure = True
if ((character().get_cc("Channel Divinity") > 0) and (combat() and not failure)):
  savRoll = combat().get_combatant(target).save("wisdom",adv)
  if (int(savRoll.total) >= spellDC):
    damage = floor(damage/2)
  combat().get_combatant(target).damage(f'{damage}')
  character().set_cc("Channel Divinity",(character().get_cc("Channel Divinity") - 1 ) )  
</drac2>
-title "{{ f'{character().name} uses a reaction to Rebuke the Violent' if not failure else f'{character().name} fails to Rebuke the Violent!' }}"
-desc "You can use your Channel Divinity to rebuke those who use violence. Immediately after an attacker within 30 feet of you deals damage with an attack against a creature other than you, you can use your reaction to force the attacker to make a Wisdom saving throw. On a failed save, the attacker takes radiant damage equal to the damage it just dealt. On a successful save, it takes half as much damage."
-f "Target"|"{{ target }}"
-f "spellDC"|"{{ spellDC }}"
-f "Saving throw (Wisdom)"|"{{savRoll}}"
-f "Damage:"|"{{ damage }}"
-f "Usage:"|"Only usable in combat. -t and -d args are critical, adv/dis argument is optional. damage should be the total damage of the attack you are reacting to.```!rtv -t target -d damage adv/dis```"
-f "{{"Channel Divinity"}}|{{'◉'*get_cc("Channel Divinity") + '〇'*(get_cc_max("Channel Divinity")-get_cc("Channel Divinity"))}}"
-footer "Source XGE"

!alias aop embed
-title "{{ f'{character().name} uses Aura of Protection' }}"
-desc "Starting at 6th level, whenever you or a friendly creature within 10 feet of you must make a saving throw, the creature gains a bonus to the saving throw equal to your Charisma modifier (with a minimum bonus of +1). You must be conscious to grant this bonus. At 18th level, the range of this aura increases to 30 feet."
-f "Bonus Total"|"{{f'{charismaMod}'}}"
-footer "Source PHB"